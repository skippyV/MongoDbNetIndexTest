@page "/"
@rendermode InteractiveServer
@using MongoDbTesting.Data
@using MongoDbTesting.Services
@using Radzen
@using Radzen.Blazor

@inject IOpovDbAccessService iOpovDbAccessService
@inject IJSRuntime iJS

<PageTitle>Home</PageTitle>

<h3>Testing MongoDB's .Net Driver </h3>

<br />
<h4>List of Opov Events</h4>
<ul style="max-height:100px; overflow-y:auto">
    @foreach (var name in documentNames)
    {
        <li>@name</li>
    }
</ul>
<br />

<p>@message</p>
<RadzenTextBox @bind-Value="@opovEventName" Style="width: 25%" aria-label="Default TextBox" />
<button class="btn btn-primary" @onclick="CreateOpovEvent">Create Opov Event</button>

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem" class="rz-p-2">
    <RadzenCheckBox @bind-Value="@allowVirtualization" Name="allowVirtualization" />
    <RadzenLabel Text="Allow virtualization" Component="allowVirtualization" />
</RadzenStack>

<RadzenDataList AllowVirtualization=@allowVirtualization Style="@(allowVirtualization ? "height:400px;overflow:auto;" : "")"
                WrapItems="@(!allowVirtualization)" AllowPaging="@(!allowVirtualization)"
                Data="@documentNames" TItem="string" PageSize="4" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true">
    <Template Context="eventOp">
        <RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden;">
            <RadzenRow Gap="0">
                <RadzenColumn Size="2" >
                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-on-secondary-lighter">@(eventOp)-AA</RadzenText>
                </RadzenColumn>

                <RadzenColumn Size="2" >
                    <RadzenButton Text="Select" Click=@(args => SelectOpovEvent(@eventOp)) />
                </RadzenColumn>

                <RadzenColumn Size="8">
                    <RadzenButton Text="Dummy Button"  />
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </Template>
</RadzenDataList>

@if (selectedOpovEvent is not null)
{
    <h4>Selected Event: @selectedOpovEvent.EventName</h4>
    <RadzenTextBox @bind-Value="@contestName" Style="width: 25%" aria-label="Default TextBox" />
    <button class="btn btn-primary" @onclick="AddContestToSelectedOpovEvent">Create Contest</button>
    <ul style="max-height:100px; overflow-y:auto">
        @if(selectedOpovEvent.Contests != null)
        {
            <RadzenDataList Data="@selectedOpovEvent.Contests" TItem="Contest">
                <Template Context="contest">
                    <RadzenRow Gap="0">
                        <RadzenColumn Size="4" >
                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-on-secondary-lighter">@(contest.Name)</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size="2">
                            <RadzenButton Text="Select" Click=@(args => SelectContest(@contest.Name)) />
                        </RadzenColumn>
                    </RadzenRow>
                </Template>
            </RadzenDataList>
        }
        else
        {
            <p>No Contests exist currently.</p>
        }

    </ul>
    <br />
}
else
{
    <h4>Selected Event: None Selected</h4>
}

@code {
    string opovEventName = "";
    string contestName = "";

    string message = "";

    bool allowVirtualization;

    List<string> documentNames = new();
    List<OpovEvent> opovEvents = new();

    OpovEvent? selectedOpovEvent = null;

    protected override async Task OnInitializedAsync()
    {
        // collectionNames = await iOpovDbAccessService.ListCollectionNames(); 

        documentNames = iOpovDbAccessService.GetDocumentNames(OpovDbAccessServiceConstants.OpovEventsCollectionName);    
    }

    private void CreateOpovEvent() // TODO - List of OpovEvents is not updated upon new event creation !!
    {
        if (!string.IsNullOrEmpty(opovEventName))
        {
            var newEvent = new OpovEvent() { EventName = opovEventName };
            message = iOpovDbAccessService.AddOpovEvent(newEvent, OpovDbAccessServiceConstants.OpovEventsCollectionName);
            opovEventName = ""; // To clear out the text box?
        }
        else
        {
            message = "Name cannot be blank";
        }
        //iNavigationManager.Refresh();  // TODO is this what I want? Or do I just want to blank out the input text box? Did not work as expected.

        //RefreshList();
    }

    private void AddContestToSelectedOpovEvent()
    {
        if (string.IsNullOrEmpty(contestName))
        {
            message = "Error, Contest name is empty";
            return;
        }
        Contest contest = new Contest(){ Name = contestName};
        message = iOpovDbAccessService.AddContest(contest, selectedOpovEvent!.EventName); // At this point opovEventName is reset to "", but selectedOpovEvent should be non-null

        // StateHasChanged(); // This did not refresh the Contest list with newly added contest
        SelectOpovEvent(selectedOpovEvent!.EventName); // However, this does update the list. Pretty crude but works.
        contestName = "";
        ScrollToBottomJS();
        // Wanted a ScrollToBottom method but only saw JS stuff for going to the top.
        // 
        // So tried to get the scroll-to-top feature working as per:
        //     https://supportcenter.devexpress.com/ticket/details/t1062210/button-for-blazor-how-to-implement-a-scroll-to-top-button
        // And called it ScrollToBottom, even though it is code for scrolling to top.
        //
        // But couldn't get it to scroll to top as expected.
    }

    private void ScrollToBottomJS()
    {
        iJS.InvokeVoidAsync("backToTop");
    }

    private void SelectOpovEvent(string eventName)
    {
        selectedOpovEvent = iOpovDbAccessService.GetOpovEvent(eventName); /// hmmm beginning to think this method should be private to the service... TODO - rethink

        //var xx = iNavigationManager.GetUriWithQueryParameter("skippy", "scoobVal");

        //  string nextStopUriAsString = iNavigationManager.ToAbsoluteUri("OpovEventEditPanel").ToString();


        // var queryParams = new Dictionary<string, string>
        // {
        //     { "OpovEventName", eventName }
        // };

        //   nextStopUriAsString = QueryHelpers.AddQueryString(nextStopUriAsString, queryParams);

        //   iNavigationManager.NavigateTo(nextStopUriAsString);
    }

    private void SelectContest(string contestName)
    {
        var xx = contestName;
    }
}